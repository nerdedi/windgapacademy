Git history secret report started at Thu Sep 11 03:53:09 UTC 2025
No candidate key found in src/env.js; running heuristic search for Google API-like keys in commits
commit df7978aa507d8bf7023c9251b53cf417ee5a70a9 nerdedi Thu Sep 11 02:57:55 2025 +0000
diff --git a/src/env.js b/src/env.js
index 3385255ffe..77a206a5e7 100644
--- a/src/env.js
+++ b/src/env.js
@@ -1,9 +1,11 @@
+// Read configuration from environment to avoid committing secrets.
+// Falls back to undefined for missing values so the caller can decide behavior.
 export const env = {
-  FIREBASE_API_KEY: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
-  FIREBASE_AUTH_DOMAIN: "windgap-academy.firebaseapp.com",
-  FIREBASE_PROJECT_ID: "windgap-academy",
-  FIREBASE_STORAGE_BUCKET: "windgap-academy.appspot.com",
-  FIREBASE_MESSAGING_SENDER_ID: "438303886042",
-  FIREBASE_APP_ID: "1:438303886042:web:19b166df519870baa433e3",
-  FIREBASE_MEASUREMENT_ID: "G-FXR0TX8S6X",
+  FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,
+  FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,
+  FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,
+  FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,
+  FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID,
+  FIREBASE_APP_ID: process.env.FIREBASE_APP_ID,
+  FIREBASE_MEASUREMENT_ID: process.env.FIREBASE_MEASUREMENT_ID,
 };

commit f4a238788dc36aa82979cbdca2d3635732df9734 nerdedi Tue Aug 26 12:42:30 2025 +0000
diff --git a/firebase.js b/firebase.js
index 165dc21a56..3da5403212 100644
--- a/firebase.js
+++ b/firebase.js
@@ -97,14 +97,16 @@ export async function saveChatLog(userId, messages) {
 }


+
+import { env } from "./src/env.js";
 const firebaseConfig = {
-  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
-  authDomain: "windgap-academy.firebaseapp.com",
-  projectId: "windgap-academy",
-  storageBucket: "windgap-academy.appspot.com",
-  messagingSenderId: "438303886042",
-  appId: "1:438303886042:web:19b166df519870baa433e3",
-  measurementId: "G-FXR0TX8S6X",
+  apiKey: env.FIREBASE_API_KEY,
+  authDomain: env.FIREBASE_AUTH_DOMAIN,
+  projectId: env.FIREBASE_PROJECT_ID,
+  storageBucket: env.FIREBASE_STORAGE_BUCKET,
+  messagingSenderId: env.FIREBASE_MESSAGING_SENDER_ID,
+  appId: env.FIREBASE_APP_ID,
+  measurementId: env.FIREBASE_MEASUREMENT_ID,
 };

 const app = initializeApp(firebaseConfig);
diff --git a/src/env.js b/src/env.js
new file mode 100644
index 0000000000..dd04c4b181
--- /dev/null
+++ b/src/env.js
@@ -0,0 +1,9 @@
+export const env = {
+  FIREBASE_API_KEY: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  FIREBASE_AUTH_DOMAIN: "windgap-academy.firebaseapp.com",
+  FIREBASE_PROJECT_ID: "windgap-academy",
+  FIREBASE_STORAGE_BUCKET: "windgap-academy.appspot.com",
+  FIREBASE_MESSAGING_SENDER_ID: "438303886042",
+  FIREBASE_APP_ID: "1:438303886042:web:19b166df519870baa433e3",
+  FIREBASE_MEASUREMENT_ID: "G-FXR0TX8S6X"
+};

commit 4c780c088daf6180cc4ae5fb5e9fa71ee26980ba nerdedi Tue Aug 26 12:42:30 2025 +0000
diff --git a/firebase.js b/firebase.js
index 165dc21a56..3da5403212 100644
--- a/firebase.js
+++ b/firebase.js
@@ -97,14 +97,16 @@ export async function saveChatLog(userId, messages) {
 }


+
+import { env } from "./src/env.js";
 const firebaseConfig = {
-  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
-  authDomain: "windgap-academy.firebaseapp.com",
-  projectId: "windgap-academy",
-  storageBucket: "windgap-academy.appspot.com",
-  messagingSenderId: "438303886042",
-  appId: "1:438303886042:web:19b166df519870baa433e3",
-  measurementId: "G-FXR0TX8S6X",
+  apiKey: env.FIREBASE_API_KEY,
+  authDomain: env.FIREBASE_AUTH_DOMAIN,
+  projectId: env.FIREBASE_PROJECT_ID,
+  storageBucket: env.FIREBASE_STORAGE_BUCKET,
+  messagingSenderId: env.FIREBASE_MESSAGING_SENDER_ID,
+  appId: env.FIREBASE_APP_ID,
+  measurementId: env.FIREBASE_MEASUREMENT_ID,
 };

 const app = initializeApp(firebaseConfig);
diff --git a/src/env.js b/src/env.js
new file mode 100644
index 0000000000..dd04c4b181
--- /dev/null
+++ b/src/env.js
@@ -0,0 +1,9 @@
+export const env = {
+  FIREBASE_API_KEY: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  FIREBASE_AUTH_DOMAIN: "windgap-academy.firebaseapp.com",
+  FIREBASE_PROJECT_ID: "windgap-academy",
+  FIREBASE_STORAGE_BUCKET: "windgap-academy.appspot.com",
+  FIREBASE_MESSAGING_SENDER_ID: "438303886042",
+  FIREBASE_APP_ID: "1:438303886042:web:19b166df519870baa433e3",
+  FIREBASE_MEASUREMENT_ID: "G-FXR0TX8S6X"
+};

commit 326cb46b9361134ad86f1e056000a649928e2f02 nerdedi Thu Aug 21 07:47:31 2025 +0000
diff --git a/firebase.js b/firebase.js
index 04ab2c3025..a1e1f458da 100644
--- a/firebase.js
+++ b/firebase.js
@@ -1,140 +1,154 @@
-
-/*
-  Windgap Academy Firebase Integration
-  - Accessibility: Data access for accessibility preferences
-  - Privacy: All user data is private and educator-reviewed
-  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
-  - Educator Logging: All data changes and access are logged
-  - Last updated: August 14, 2025
-*/
-// Sample integration points for modules
-// Pure function for validating user data
-export function validateUserData(data) {
-  // Validation is independent; only checks the provided data object.
-  // Privacy: No data is stored, only validated
-  // Educator log: user data validated
-  return typeof data === "object" && data !== null;
-}
-
-// Pure function for transforming lesson plan data
-export function transformLessonPlan(plan) {
-  // Transformation is independent; only affects the provided plan string.
-  // Privacy: No data is stored, only transformed
-  // Educator log: lesson plan transformed
-  return plan.trim();
-}
-
-export async function getAccessibilityPrefs(userId) {
-  // Privacy: Accessibility preferences are private and educator-reviewed
-  // Educator log: accessibility preferences accessed for userId
-  try {
-    const { getFirestore, doc, getDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return getDoc(doc(db, "accessibility", userId));
-  } catch (err) {
-    console.error("Error accessing accessibility prefs:", err);
-    throw err;
-  }
-}
-
-export async function getLessonPlans(domain, userId) {
-  // Privacy: Lesson plans are private and educator-reviewed
-  // Educator log: lesson plans accessed for domain and userId
-  try {
-    const { getFirestore, doc, getDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return getDoc(doc(db, "lessonplans", `${domain}_${userId}`));
-  } catch (err) {
-    console.error("Error accessing lesson plans:", err);
-    throw err;
-  }
-}
-
-export async function saveLessonPlan(domain, userId, plan) {
-  // Privacy: Lesson plan changes are private and educator-reviewed
-  // Educator log: lesson plan saved for domain and userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "lessonplans", `${domain}_${userId}`), { plan });
-  } catch (err) {
-    console.error("Error saving lesson plan:", err);
-    throw err;
-  }
-}
-
-export async function saveAvatarData(userId, avatarData) {
-  // Privacy: Avatar data is private and educator-reviewed
-  // Educator log: avatar data saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "avatars", userId), avatarData);
-  } catch (err) {
-    console.error("Error saving avatar data:", err);
-    throw err;
-  }
-}
-
-export async async function saveTokens(userId, tokens) {
-  // Privacy: Token changes are private and educator-reviewed
-  // Educator log: tokens saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "tokens", userId), { tokens });
-  } catch (err) {
-    console.error("Error saving tokens:", err);
-    throw err;
-  }
-}
-
-export async function savePurchase(userId, item) {
-  // Privacy: Purchases are private and educator-reviewed
-  // Educator log: purchase saved for userId and item
-  try {
-    const { getFirestore, collection, addDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return addDoc(collection(db, "purchases"), { userId, item });
-  } catch (err) {
-    console.error("Error saving purchase:", err);
-    throw err;
-  }
-}
-
-export async function saveChatLog(userId, messages) {
-  // Privacy: Chat logs are private and educator-reviewed
-  // Educator log: chat log saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "chatlogs", userId), { messages });
-  } catch (err) {
-    console.error("Error saving chat log:", err);
-    throw err;
-  }
-}
-
-import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
-import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
-
-const firebaseConfig = {
-  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
-  authDomain: "windgap-academy.firebaseapp.com",
-  projectId: "windgap-academy",
-  storageBucket: "windgap-academy.appspot.com",
-  messagingSenderId: "438303886042",
-  appId: "1:438303886042:web:19b166df519870baa433e3",
-  measurementId: "G-FXR0TX8S6X"
-};
-
-const app = initializeApp(firebaseConfig);
-export const auth = getAuth(app);
-
-export function loginUser(email, password) {
-
-
-  // Privacy: Login credentials are securely handled and educator-reviewed
-  // Educator log: login attempted for email
-  return signInWithEmailAndPassword(auth, email, password);
-}
+/*
+  Windgap Academy Firebase Integration
+  - Accessibility: Data access for accessibility preferences
+  - Privacy: All user data is private and educator-reviewed
+  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
+  - Educator Logging: All data changes and access are logged
+  - Last updated: August 14, 2025
+*/
+// Sample integration points for modules
+// Pure function for validating user data
+export function validateUserData(data) {
+  // Validation is independent; only checks the provided data object.
+  // Privacy: No data is stored, only validated
+  // Educator log: user data validated
+  return typeof data === "object" && data !== null;
+}
+
+// Pure function for transforming lesson plan data
+export function transformLessonPlan(plan) {
+  // Transformation is independent; only affects the provided plan string.
+  // Privacy: No data is stored, only transformed
+  // Educator log: lesson plan transformed
+  return plan.trim();
+}
+
+export async function getAccessibilityPrefs(userId) {
+  // Privacy: Accessibility preferences are private and educator-reviewed
+  // Educator log: accessibility preferences accessed for userId
+  try {
+    const { getFirestore, doc, getDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return getDoc(doc(db, "accessibility", userId));
+  } catch (err) {
+    console.error("Error accessing accessibility prefs:", err);
+    throw err;
+  }
+}
+
+export async function getLessonPlans(domain, userId) {
+  // Privacy: Lesson plans are private and educator-reviewed
+  // Educator log: lesson plans accessed for domain and userId
+  try {
+    const { getFirestore, doc, getDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return getDoc(doc(db, "lessonplans", `${domain}_${userId}`));
+  } catch (err) {
+    console.error("Error accessing lesson plans:", err);
+    throw err;
+  }
+}
+
+export async function saveLessonPlan(domain, userId, plan) {
+  // Privacy: Lesson plan changes are private and educator-reviewed
+  // Educator log: lesson plan saved for domain and userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "lessonplans", `${domain}_${userId}`), { plan });
+  } catch (err) {
+    console.error("Error saving lesson plan:", err);
+    throw err;
+  }
+}
+
+export async function saveAvatarData(userId, avatarData) {
+  // Privacy: Avatar data is private and educator-reviewed
+  // Educator log: avatar data saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "avatars", userId), avatarData);
+  } catch (err) {
+    console.error("Error saving avatar data:", err);
+    throw err;
+  }
+}
+
+export async function saveTokens(userId, tokens) {
+  // Privacy: Token changes are private and educator-reviewed
+  // Educator log: tokens saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "tokens", userId), { tokens });
+  } catch (err) {
+    console.error("Error saving tokens:", err);
+    throw err;
+  }
+}
+
+export async function savePurchase(userId, item) {
+  // Privacy: Purchases are private and educator-reviewed
+  // Educator log: purchase saved for userId and item
+  try {
+    const { getFirestore, collection, addDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return addDoc(collection(db, "purchases"), { userId, item });
+  } catch (err) {
+    console.error("Error saving purchase:", err);
+    throw err;
+  }
+}
+
+export async function saveChatLog(userId, messages) {
+  // Privacy: Chat logs are private and educator-reviewed
+  // Educator log: chat log saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "chatlogs", userId), { messages });
+  } catch (err) {
+    console.error("Error saving chat log:", err);
+    throw err;
+  }
+}
+
+import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
+import {
+  getAuth,
+  signInWithEmailAndPassword,
+} from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
+
+const firebaseConfig = {
+  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  authDomain: "windgap-academy.firebaseapp.com",
+  projectId: "windgap-academy",
+  storageBucket: "windgap-academy.appspot.com",
+  messagingSenderId: "438303886042",
+  appId: "1:438303886042:web:19b166df519870baa433e3",
+  measurementId: "G-FXR0TX8S6X",
+};
+
+const app = initializeApp(firebaseConfig);
+export const auth = getAuth(app);
+
+export function loginUser(email, password) {
+  // Privacy: Login credentials are securely handled and educator-reviewed
+  // Educator log: login attempted for email
+  return signInWithEmailAndPassword(auth, email, password);
+}

commit 3b39f6791bc6967601e75b1f5cd86d11f1bf04bb nerdedi Thu Aug 21 07:47:31 2025 +0000
diff --git a/firebase.js b/firebase.js
index 04ab2c3025..a1e1f458da 100644
--- a/firebase.js
+++ b/firebase.js
@@ -1,140 +1,154 @@
-
-/*
-  Windgap Academy Firebase Integration
-  - Accessibility: Data access for accessibility preferences
-  - Privacy: All user data is private and educator-reviewed
-  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
-  - Educator Logging: All data changes and access are logged
-  - Last updated: August 14, 2025
-*/
-// Sample integration points for modules
-// Pure function for validating user data
-export function validateUserData(data) {
-  // Validation is independent; only checks the provided data object.
-  // Privacy: No data is stored, only validated
-  // Educator log: user data validated
-  return typeof data === "object" && data !== null;
-}
-
-// Pure function for transforming lesson plan data
-export function transformLessonPlan(plan) {
-  // Transformation is independent; only affects the provided plan string.
-  // Privacy: No data is stored, only transformed
-  // Educator log: lesson plan transformed
-  return plan.trim();
-}
-
-export async function getAccessibilityPrefs(userId) {
-  // Privacy: Accessibility preferences are private and educator-reviewed
-  // Educator log: accessibility preferences accessed for userId
-  try {
-    const { getFirestore, doc, getDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return getDoc(doc(db, "accessibility", userId));
-  } catch (err) {
-    console.error("Error accessing accessibility prefs:", err);
-    throw err;
-  }
-}
-
-export async function getLessonPlans(domain, userId) {
-  // Privacy: Lesson plans are private and educator-reviewed
-  // Educator log: lesson plans accessed for domain and userId
-  try {
-    const { getFirestore, doc, getDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return getDoc(doc(db, "lessonplans", `${domain}_${userId}`));
-  } catch (err) {
-    console.error("Error accessing lesson plans:", err);
-    throw err;
-  }
-}
-
-export async function saveLessonPlan(domain, userId, plan) {
-  // Privacy: Lesson plan changes are private and educator-reviewed
-  // Educator log: lesson plan saved for domain and userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "lessonplans", `${domain}_${userId}`), { plan });
-  } catch (err) {
-    console.error("Error saving lesson plan:", err);
-    throw err;
-  }
-}
-
-export async function saveAvatarData(userId, avatarData) {
-  // Privacy: Avatar data is private and educator-reviewed
-  // Educator log: avatar data saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "avatars", userId), avatarData);
-  } catch (err) {
-    console.error("Error saving avatar data:", err);
-    throw err;
-  }
-}
-
-export async async function saveTokens(userId, tokens) {
-  // Privacy: Token changes are private and educator-reviewed
-  // Educator log: tokens saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "tokens", userId), { tokens });
-  } catch (err) {
-    console.error("Error saving tokens:", err);
-    throw err;
-  }
-}
-
-export async function savePurchase(userId, item) {
-  // Privacy: Purchases are private and educator-reviewed
-  // Educator log: purchase saved for userId and item
-  try {
-    const { getFirestore, collection, addDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return addDoc(collection(db, "purchases"), { userId, item });
-  } catch (err) {
-    console.error("Error saving purchase:", err);
-    throw err;
-  }
-}
-
-export async function saveChatLog(userId, messages) {
-  // Privacy: Chat logs are private and educator-reviewed
-  // Educator log: chat log saved for userId
-  try {
-    const { getFirestore, doc, setDoc } = await import("https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js");
-    const db = getFirestore(app);
-    return setDoc(doc(db, "chatlogs", userId), { messages });
-  } catch (err) {
-    console.error("Error saving chat log:", err);
-    throw err;
-  }
-}
-
-import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
-import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
-
-const firebaseConfig = {
-  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
-  authDomain: "windgap-academy.firebaseapp.com",
-  projectId: "windgap-academy",
-  storageBucket: "windgap-academy.appspot.com",
-  messagingSenderId: "438303886042",
-  appId: "1:438303886042:web:19b166df519870baa433e3",
-  measurementId: "G-FXR0TX8S6X"
-};
-
-const app = initializeApp(firebaseConfig);
-export const auth = getAuth(app);
-
-export function loginUser(email, password) {
-
-
-  // Privacy: Login credentials are securely handled and educator-reviewed
-  // Educator log: login attempted for email
-  return signInWithEmailAndPassword(auth, email, password);
-}
+/*
+  Windgap Academy Firebase Integration
+  - Accessibility: Data access for accessibility preferences
+  - Privacy: All user data is private and educator-reviewed
+  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
+  - Educator Logging: All data changes and access are logged
+  - Last updated: August 14, 2025
+*/
+// Sample integration points for modules
+// Pure function for validating user data
+export function validateUserData(data) {
+  // Validation is independent; only checks the provided data object.
+  // Privacy: No data is stored, only validated
+  // Educator log: user data validated
+  return typeof data === "object" && data !== null;
+}
+
+// Pure function for transforming lesson plan data
+export function transformLessonPlan(plan) {
+  // Transformation is independent; only affects the provided plan string.
+  // Privacy: No data is stored, only transformed
+  // Educator log: lesson plan transformed
+  return plan.trim();
+}
+
+export async function getAccessibilityPrefs(userId) {
+  // Privacy: Accessibility preferences are private and educator-reviewed
+  // Educator log: accessibility preferences accessed for userId
+  try {
+    const { getFirestore, doc, getDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return getDoc(doc(db, "accessibility", userId));
+  } catch (err) {
+    console.error("Error accessing accessibility prefs:", err);
+    throw err;
+  }
+}
+
+export async function getLessonPlans(domain, userId) {
+  // Privacy: Lesson plans are private and educator-reviewed
+  // Educator log: lesson plans accessed for domain and userId
+  try {
+    const { getFirestore, doc, getDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return getDoc(doc(db, "lessonplans", `${domain}_${userId}`));
+  } catch (err) {
+    console.error("Error accessing lesson plans:", err);
+    throw err;
+  }
+}
+
+export async function saveLessonPlan(domain, userId, plan) {
+  // Privacy: Lesson plan changes are private and educator-reviewed
+  // Educator log: lesson plan saved for domain and userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "lessonplans", `${domain}_${userId}`), { plan });
+  } catch (err) {
+    console.error("Error saving lesson plan:", err);
+    throw err;
+  }
+}
+
+export async function saveAvatarData(userId, avatarData) {
+  // Privacy: Avatar data is private and educator-reviewed
+  // Educator log: avatar data saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "avatars", userId), avatarData);
+  } catch (err) {
+    console.error("Error saving avatar data:", err);
+    throw err;
+  }
+}
+
+export async function saveTokens(userId, tokens) {
+  // Privacy: Token changes are private and educator-reviewed
+  // Educator log: tokens saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "tokens", userId), { tokens });
+  } catch (err) {
+    console.error("Error saving tokens:", err);
+    throw err;
+  }
+}
+
+export async function savePurchase(userId, item) {
+  // Privacy: Purchases are private and educator-reviewed
+  // Educator log: purchase saved for userId and item
+  try {
+    const { getFirestore, collection, addDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return addDoc(collection(db, "purchases"), { userId, item });
+  } catch (err) {
+    console.error("Error saving purchase:", err);
+    throw err;
+  }
+}
+
+export async function saveChatLog(userId, messages) {
+  // Privacy: Chat logs are private and educator-reviewed
+  // Educator log: chat log saved for userId
+  try {
+    const { getFirestore, doc, setDoc } = await import(
+      "https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js"
+    );
+    const db = getFirestore(app);
+    return setDoc(doc(db, "chatlogs", userId), { messages });
+  } catch (err) {
+    console.error("Error saving chat log:", err);
+    throw err;
+  }
+}
+
+import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
+import {
+  getAuth,
+  signInWithEmailAndPassword,
+} from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
+
+const firebaseConfig = {
+  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  authDomain: "windgap-academy.firebaseapp.com",
+  projectId: "windgap-academy",
+  storageBucket: "windgap-academy.appspot.com",
+  messagingSenderId: "438303886042",
+  appId: "1:438303886042:web:19b166df519870baa433e3",
+  measurementId: "G-FXR0TX8S6X",
+};
+
+const app = initializeApp(firebaseConfig);
+export const auth = getAuth(app);
+
+export function loginUser(email, password) {
+  // Privacy: Login credentials are securely handled and educator-reviewed
+  // Educator log: login attempted for email
+  return signInWithEmailAndPassword(auth, email, password);
+}

commit 658a686590ce1c99131621961ae3134002fdb588 nerdedi Thu Aug 14 16:11:32 2025 +1000
diff --git a/firebase.js b/firebase.js
new file mode 100644
index 0000000000..d301bf009c
--- /dev/null
+++ b/firebase.js
@@ -0,0 +1,85 @@
+/*
+  Windgap Academy Firebase Integration
+  - Accessibility: Data access for accessibility preferences
+  - Privacy: All user data is private and educator-reviewed
+  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
+  - Educator Logging: All data changes and access are logged
+  - Last updated: August 14, 2025
+*/
+// Sample integration points for modules
+// Pure function for validating user data
+export function validateUserData(data) {
+  // Validation is independent; only checks the provided data object.
+  // Privacy: No data is stored, only validated
+  // Educator log: user data validated
+  return typeof data === 'object' && data !== null;
+}
+
+// Pure function for transforming lesson plan data
+export function transformLessonPlan(plan) {
+  // Transformation is independent; only affects the provided plan string.
+  // Privacy: No data is stored, only transformed
+  // Educator log: lesson plan transformed
+  return plan.trim();
+}
+export function getAccessibilityPrefs(userId) {
+  // Privacy: Accessibility preferences are private and educator-reviewed
+  // Educator log: accessibility preferences accessed for userId
+  // return firebase.firestore().collection('accessibility').doc(userId).get();
+}
+
+export function getLessonPlans(domain, userId) {
+  // Privacy: Lesson plans are private and educator-reviewed
+  // Educator log: lesson plans accessed for domain and userId
+  // return firebase.firestore().collection('lessonplans').doc(`${domain}_${userId}`).get();
+}
+
+export function saveLessonPlan(domain, userId, plan) {
+  // Privacy: Lesson plan changes are private and educator-reviewed
+  // Educator log: lesson plan saved for domain and userId
+  // firebase.firestore().collection('lessonplans').doc(`${domain}_${userId}`).set({ plan });
+}
+export function saveAvatarData(userId, avatarData) {
+  // Privacy: Avatar data is private and educator-reviewed
+  // Educator log: avatar data saved for userId
+  // firebase.firestore().collection('avatars').doc(userId).set(avatarData);
+}
+
+export function saveTokens(userId, tokens) {
+  // Privacy: Token changes are private and educator-reviewed
+  // Educator log: tokens saved for userId
+  // firebase.firestore().collection('tokens').doc(userId).set({ tokens });
+}
+
+export function savePurchase(userId, item) {
+  // Privacy: Purchases are private and educator-reviewed
+  // Educator log: purchase saved for userId and item
+  // firebase.firestore().collection('purchases').add({ userId, item });
+}
+
+export function saveChatLog(userId, messages) {
+  // Privacy: Chat logs are private and educator-reviewed
+  // Educator log: chat log saved for userId
+  // firebase.firestore().collection('chatlogs').doc(userId).set({ messages });
+}
+import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
+import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
+
+const firebaseConfig = {
+  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  authDomain: "windgap-academy.firebaseapp.com",
+  projectId: "windgap-academy",
+  storageBucket: "windgap-academy.appspot.com",
+  messagingSenderId: "438303886042",
+  appId: "1:438303886042:web:19b166df519870baa433e3",
+  measurementId: "G-FXR0TX8S6X"
+};
+
+const app = initializeApp(firebaseConfig);
+const auth = getAuth(app);
+
+export function loginUser(email, password) {
+  // Privacy: Login credentials are securely handled and educator-reviewed
+  // Educator log: login attempted for email
+  return signInWithEmailAndPassword(auth, email, password);
+}

commit 758b173ec3568d42a09cb1a090b34ed2f63ab18a nerdedi Thu Aug 14 16:11:32 2025 +1000
diff --git a/firebase.js b/firebase.js
new file mode 100644
index 0000000000..d301bf009c
--- /dev/null
+++ b/firebase.js
@@ -0,0 +1,85 @@
+/*
+  Windgap Academy Firebase Integration
+  - Accessibility: Data access for accessibility preferences
+  - Privacy: All user data is private and educator-reviewed
+  - Compliance: Age-appropriate, ad-free, NDIS and Australian standards
+  - Educator Logging: All data changes and access are logged
+  - Last updated: August 14, 2025
+*/
+// Sample integration points for modules
+// Pure function for validating user data
+export function validateUserData(data) {
+  // Validation is independent; only checks the provided data object.
+  // Privacy: No data is stored, only validated
+  // Educator log: user data validated
+  return typeof data === 'object' && data !== null;
+}
+
+// Pure function for transforming lesson plan data
+export function transformLessonPlan(plan) {
+  // Transformation is independent; only affects the provided plan string.
+  // Privacy: No data is stored, only transformed
+  // Educator log: lesson plan transformed
+  return plan.trim();
+}
+export function getAccessibilityPrefs(userId) {
+  // Privacy: Accessibility preferences are private and educator-reviewed
+  // Educator log: accessibility preferences accessed for userId
+  // return firebase.firestore().collection('accessibility').doc(userId).get();
+}
+
+export function getLessonPlans(domain, userId) {
+  // Privacy: Lesson plans are private and educator-reviewed
+  // Educator log: lesson plans accessed for domain and userId
+  // return firebase.firestore().collection('lessonplans').doc(`${domain}_${userId}`).get();
+}
+
+export function saveLessonPlan(domain, userId, plan) {
+  // Privacy: Lesson plan changes are private and educator-reviewed
+  // Educator log: lesson plan saved for domain and userId
+  // firebase.firestore().collection('lessonplans').doc(`${domain}_${userId}`).set({ plan });
+}
+export function saveAvatarData(userId, avatarData) {
+  // Privacy: Avatar data is private and educator-reviewed
+  // Educator log: avatar data saved for userId
+  // firebase.firestore().collection('avatars').doc(userId).set(avatarData);
+}
+
+export function saveTokens(userId, tokens) {
+  // Privacy: Token changes are private and educator-reviewed
+  // Educator log: tokens saved for userId
+  // firebase.firestore().collection('tokens').doc(userId).set({ tokens });
+}
+
+export function savePurchase(userId, item) {
+  // Privacy: Purchases are private and educator-reviewed
+  // Educator log: purchase saved for userId and item
+  // firebase.firestore().collection('purchases').add({ userId, item });
+}
+
+export function saveChatLog(userId, messages) {
+  // Privacy: Chat logs are private and educator-reviewed
+  // Educator log: chat log saved for userId
+  // firebase.firestore().collection('chatlogs').doc(userId).set({ messages });
+}
+import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
+import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";
+
+const firebaseConfig = {
+  apiKey: "AIzaSyAHKxpp6tYRPJKih8Iu9OIrFcNc1pHRjaI",
+  authDomain: "windgap-academy.firebaseapp.com",
+  projectId: "windgap-academy",
+  storageBucket: "windgap-academy.appspot.com",
+  messagingSenderId: "438303886042",
+  appId: "1:438303886042:web:19b166df519870baa433e3",
+  measurementId: "G-FXR0TX8S6X"
+};
+
+const app = initializeApp(firebaseConfig);
+const auth = getAuth(app);
+
+export function loginUser(email, password) {
+  // Privacy: Login credentials are securely handled and educator-reviewed
+  // Educator log: login attempted for email
+  return signInWithEmailAndPassword(auth, email, password);
+}
Git history secret report finished at Thu Sep 11 03:54:00 UTC 2025
